using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

using Avalonia.NameGenerator.VisualBasic.Domain;
using XamlX.TypeSystem;

namespace Avalonia.NameGenerator.VisualBasic.Generator;

internal class InitializeComponentCodeGenerator : ICodeGenerator
{
    private readonly bool _diagnosticsAreConnected;

    public InitializeComponentCodeGenerator(IXamlTypeSystem types)
    {
        _diagnosticsAreConnected = types.FindAssembly("Avalonia.Diagnostics") != null;
    }

    public string GenerateCode(string className, string nameSpace, IXamlType xamlType, IEnumerable<ResolvedName> names)
    {
        var usingNameSpace = nameSpace.Contains(".");
        var indent = (usingNameSpace) ? "    " : "";

        var properties = new List<string>();
        var initializations = new List<string>();
        foreach (var resolvedName in names)
        {
            var (typeName, name, fieldModifier) = resolvedName;
            properties.Add($"{indent}    {fieldModifier} Property {name} As {typeName}");
            initializations.Add($"{indent}        {name} = FindNameScope()?.Find(Of {typeName})(\"{name}\")");
        }

        var attachDevTools = _diagnosticsAreConnected && IsWindow(xamlType);

        if (usingNameSpace)
        {
            var vbNameSpace = string.Join(".", nameSpace.Split('.').Skip(1));

            return $@"' <auto-generated />

Imports Avalonia
Imports Avalonia.Controls
Imports Avalonia.Markup.Xaml

Namespace {vbNameSpace}

    Partial Class {className}

{string.Join("\n", properties)}

        ' <summary>
        ' Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
        ' </summary>
        ' <param name=""loadXaml"">Should the XAML be loaded into the component.</param>
{GetAttachDevToolsParameterDocumentation(attachDevTools, usingNameSpace)}
        Private Sub InitializeComponent(Optional loadXaml As Boolean = True{(attachDevTools ? ", Optional attachDevTools As Boolean = True" : string.Empty)})
        
            If loadXaml Then
                AvaloniaXamlLoader.Load(Me)
            End If

{GetAttachDevToolsCodeBlock(attachDevTools, usingNameSpace)}
{string.Join("\n", initializations)}

        End Sub

    End Class

End Namespace
";
        }
        else
        {
            return $@"' <auto-generated />

Imports Avalonia
Imports Avalonia.Controls
Imports Avalonia.Markup.Xaml

Partial Public Class {className}

{string.Join("\n", properties)}

    ' <summary>
    ' Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced).
    ' </summary>
    ' <param name=""loadXaml"">Should the XAML be loaded into the component.</param>
{GetAttachDevToolsParameterDocumentation(attachDevTools, usingNameSpace)}
    Private Sub InitializeComponent(Optional loadXaml As Boolean = True{(attachDevTools ? ", Optional attachDevTools As Boolean = True" : string.Empty)})
        
        If loadXaml Then
            AvaloniaXamlLoader.Load(Me)
        End If

{GetAttachDevToolsCodeBlock(attachDevTools, usingNameSpace)}
{string.Join("\n", initializations)}

    End Sub

End Class
";
        }
    }

    private static string GetAttachDevToolsCodeBlock(bool attachDevTools, bool usingNameSpace)
    {
        if (!attachDevTools)
        {
            return string.Empty;
        }

        var indent = (usingNameSpace) ? "    " : "";
        return $@"
#If DEBUG Then

{indent}            ' Attach dev tools (if Avalonia.Diagnostics package is referenced).
{indent}            If (attachDevTools) Then
{indent}                MyBase.AttachDevTools()
{indent}            End If

#End If
";
    }

    private string GetAttachDevToolsParameterDocumentation(bool attachDevTools, bool usingNameSpace)
    {
        if (!attachDevTools)
        {
            return string.Empty;
        }

        var indent = (usingNameSpace) ? "    " : "";
        return $@"{indent}        ' <param name=""attachDevTools"">Should the dev tools be attached.</param>
";
    }

    private static bool IsWindow(IXamlType xamlType)
    {
        var type = xamlType;
        bool isWindow;
        do
        {
            isWindow = type.FullName == "Avalonia.Controls.Window";
            type = type.BaseType;
        } while (!isWindow && type != null);

        return isWindow;
    }
}